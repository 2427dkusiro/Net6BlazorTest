@page "/"
@using System.Runtime.CompilerServices
@using System.Runtime.InteropServices
@using TestImplement
@inject IJSRuntime JSRuntime
@inject HttpClient Http;

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

<h2>パフォーマンス測定(ふるいによる素数列挙)</h2>
<button class="btn btn-primary" @onclick="OnClickPrimeTest">実行</button>
<span>@PrimeTestResult</span>

<hr />

<h2>JS呼び出し測定(単純呼び出しのオーバーヘッド)</h2>
<button class="btn btn-primary" @onclick="OnClickCallTest">実行</button>
<span>
    @CallTestResult
</span>

<hr />

<h2>JS配列相互運用測定(配列データの転送)</h2>
<button class="btn btn-primary" @onclick="OnClickArrayTest">実行</button>
<span>@ArrayTestResult</span>

<hr />

<h2>シリアライザ比較(カスタムシリアライザによるJS呼び出し) N=256</h2>
<button class="btn btn-primary" @onclick="OnClickUTF8JsonTest256">実行</button>
<span>@UTF8JsonResult256</span>

<hr />

<h2>シリアライザ比較(カスタムシリアライザによるJS呼び出し) N=4096</h2>
<button class="btn btn-primary" @onclick="OnClickUTF8JsonTest4096">実行</button>
<span>@UTF8JsonResult4096</span>

<hr />

@code {
    private string PrimeTestResult { get; set; } = "";
    private string CallTestResult { get; set; } = "";
    private string ArrayTestResult { get; set; } = "";
    private string UTF8JsonResult256 { get; set; } = "";
    private string UTF8JsonResult4096 { get; set; } = "";

    private void OnClickPrimeTest()
    {
        PrimeTestResult = PrimeTest.RunTest((int)Math.Pow(10, 6));
    }

    private async Task OnClickCallTest()
    {
        // var responce = await Http.GetByteArrayAsync("_framework/System.Private.Runtime.InteropServices.JavaScript.dll");
        // System.Reflection.Assembly.Load(responce);
        CallTestResult = await UnmarshalTest.RunTest(1 << 12, JSRuntime) + "\n" + await UnmarshalTest.RunTest(1 << 8, JSRuntime);
    }

    private async Task OnClickArrayTest()
    {
        ArrayTestResult = await DoArrayTest(1 << 20);
    }

    private async Task OnClickUTF8JsonTest256()
    {
        UTF8JsonResult256 = await SerializerTest.RunTest(1 << 8, JSRuntime);
    }

    private async Task OnClickUTF8JsonTest4096()
    {
        UTF8JsonResult4096 = await SerializerTest.RunTest(1 << 12, JSRuntime);
    }

    private async Task<string> DoArrayTest(int size)
    {
        var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./TestScript.js");
        var array = Enumerable.Range(0, size).Select(x => (byte)x).ToArray();
        List<TimeSpan> list = new();

        for (int i = 0; i < 10; i++)
        {
            var stopwatch = System.Diagnostics.Stopwatch.StartNew();
            await module.InvokeVoidAsync("ByteArrayTest", array);
            stopwatch.Stop();
            list.Add(stopwatch.Elapsed);
        }
        return ($"arg-size={array.Length},ave:{list.Select(x => x.TotalMilliseconds).Average()}ms,max={list.Max().TotalMilliseconds}ms");
    }
}