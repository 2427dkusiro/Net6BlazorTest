@page "/"
@using System.Runtime.CompilerServices
@inject IJSRuntime JSRuntime

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

<h2>パフォーマンス測定(ふるいによる素数列挙)</h2>
<button class="btn btn-primary" @onclick="OnClickPrimeTest">実行</button>
<span>@PrimeTestResult</span>

<hr />

<h2>JS呼び出し測定(単純呼び出しのオーバーヘッド)</h2>
<button class="btn btn-primary" @onclick="OnClickCallTest">実行</button>
<span>
    @CallTestResult
</span>

<hr />

<h2>JS配列相互運用測定(配列データの転送)</h2>
<button class="btn btn-primary" @onclick="OnClickArrayTest">実行</button>
<span>@ArrayTestResult</span>

<hr />

<h2>シリアライザ比較(カスタムシリアライザによるJS呼び出し) N=256</h2>
<button class="btn btn-primary" @onclick="OnClickUTF8JsonTest8">実行</button>
<span>@UTF8JsonResult8</span>

<hr />

<h2>シリアライザ比較(カスタムシリアライザによるJS呼び出し) N=4096</h2>
<button class="btn btn-primary" @onclick="OnClickUTF8JsonTest12">実行</button>
<span>@UTF8JsonResult12</span>

<hr />

@code {
    private string PrimeTestResult { get; set; } = "";
    private string CallTestResult { get; set; } = "";
    private string ArrayTestResult { get; set; } = "";
    private string UTF8JsonResult8 { get; set; } = "";
    private string UTF8JsonResult12 { get; set; } = "";

    private async Task OnClickPrimeTest()
    {
        DoPrimeTest();
    }

    private async Task OnClickCallTest()
    {
        CallTestResult = await DoUnmarshalTest(1 << 12) + "\n" + await DoUnmarshalTest(1 << 8);
    }

    private async Task OnClickArrayTest()
    {
        ArrayTestResult = await DoArrayTest(1 << 20);
    }

    private async Task OnClickUTF8JsonTest8()
    {
        UTF8JsonResult8 = await DoUTF8JsonTest(1 << 8);
    }

    private async Task OnClickUTF8JsonTest12()
    {
        UTF8JsonResult12 = await DoUTF8JsonTest(1 << 12);
    }

    private async Task<string> DoUTF8JsonTest(int size)
    {
        TestObject[] objects = Enumerable.Range(1, size).Select(x => TestObject.CreateDummy()).ToArray();
        var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./TestScript.js")
            as Microsoft.JSInterop.Implementation.JSObjectReference;
        var module2 = module as IJSInProcessObjectReference;
        var moduleId = module.GetId();
        var resolver = Utf8Json.Resolvers.StandardResolver.AllowPrivateCamelCase;

        var watch = System.Diagnostics.Stopwatch.StartNew();
        foreach (var obj in objects)
        {
            JSHelper.InvokeJSUTF8<TestObject, object>("UTF8JsonTest", obj, resolver, moduleId);
        }
        watch.Stop();
        var custom = watch.ElapsedMilliseconds;

        watch = System.Diagnostics.Stopwatch.StartNew();
        foreach (var obj in objects)
        {
            module2.InvokeVoid("JsonTest", obj);
        }
        watch.Stop();
        var inProcess = watch.ElapsedMilliseconds;

        return $"call-size={size},utf8Json:{custom}ms,InProcess:{inProcess}ms";
    }

    private async Task<string> DoArrayTest(int size)
    {
        var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./TestScript.js");
        var array = Enumerable.Range(0, size).Select(x => (byte)x).ToArray();
        List<TimeSpan> list = new();

        for (int i = 0; i < 10; i++)
        {
            var stopwatch = System.Diagnostics.Stopwatch.StartNew();
            await module.InvokeVoidAsync("ByteArrayTest", array);
            stopwatch.Stop();
            list.Add(stopwatch.Elapsed);
        }
        return ($"arg-size={array.Length},ave:{list.Select(x => x.TotalMilliseconds).Average()}ms,max={list.Max().TotalMilliseconds}ms");
    }

    private async Task<string> DoUnmarshalTest(int size)
    {
        var runtime = (Microsoft.JSInterop.WebAssembly.WebAssemblyJSRuntime)JSRuntime;
        var module = await runtime.InvokeAsync<IJSUnmarshalledObjectReference>("import", "./TestScript.js");
        var moduleId = (module as Microsoft.JSInterop.Implementation.JSObjectReference).GetId();

        var watch = System.Diagnostics.Stopwatch.StartNew();
        for (int i = 0; i < size; i++)
        {
            JSHelper.InvokeUnmarshalled<int, object, object, object>("Hoge", i, null, null, moduleId);
        }
        watch.Stop();
        var original = watch.ElapsedMilliseconds;

        watch = System.Diagnostics.Stopwatch.StartNew();
        for (int i = 0; i < size; i++)
        {
            module.InvokeUnmarshalled<int, bool>("Hoge", i);
        }
        watch.Stop();
        var unmarshalled = watch.ElapsedMilliseconds;

        watch = System.Diagnostics.Stopwatch.StartNew();
        for (int i = 0; i < size; i++)
        {
            module.InvokeVoid("Hoge", i);
        }
        watch.Stop();
        var inProcess = watch.ElapsedMilliseconds;

        watch = System.Diagnostics.Stopwatch.StartNew();
        for (int i = 0; i < size; i++)
        {
            await module.InvokeVoidAsync("Hoge", i);
        }
        watch.Stop();
        var jSRuntime = watch.ElapsedMilliseconds;

        return $"call-count={size},JSRuntime:{jSRuntime}ms,InProcess:{inProcess}ms,Unmarshal={unmarshalled}ms,Original={original}ms";
    }

    private void DoPrimeTest()
    {
        PrimeTestResult = "";
        List<TimeSpan> list = new();
        int n = (int)Math.Pow(10, 6);

        for (int i = 0; i < 10; i++)
        {
            var stopwatch = System.Diagnostics.Stopwatch.StartNew();
            var primes = FindPrimes(n).ToArray();
            var count = primes.Length;
            stopwatch.Stop();
            list.Add(stopwatch.Elapsed);
        }
        PrimeTestResult = $"n={n},ave={list.Select(x => x.TotalMilliseconds).Average()}ms,max={list.Max().TotalMilliseconds}ms";
    }

    // O(NlogN)程度の計算量でN以下の素数を列挙する
    // パフォーマンス測定用
    private IEnumerable<int> FindPrimes(int n)
    {
        if (n < 0)
        {
            return Array.Empty<int>();
        }

        var isPrime = new bool[n + 1];
        Array.Fill(isPrime, true);
        isPrime[0] = false;
        isPrime[1] = false;

        for (int i = 2; i < isPrime.Length; i++)
        {
            if (!isPrime[i])
            {
                continue;
            }
            for (int j = i << 1; j < isPrime.Length; j += i)
            {
                isPrime[j] = false;
            }
        }

        return isPrime.Select((x, i) => (x, i)).Where(tuple => tuple.x).Select(tuple => tuple.i);
    }
}